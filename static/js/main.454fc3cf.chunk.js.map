{"version":3,"sources":["components/Todo/index.js","redux/actions.js","redux/selectors.js","components/TodoList/index.js","components/Filters/index.js","App.js","components/Filters/FiltersSlice.js","components/TodoList/TodosSlice.js","redux/reducer.js","redux/store.js","index.js"],"names":["priorityColorMapping","High","Medium","Low","Todo","name","prioriry","completed","id","useState","checked","setChecked","dispatch","useDispatch","justify","style","marginBottom","opacity","textDecoration","onChange","type","payload","color","margin","todosRemainingSelector","createSelector","state","todoList","filters","search","status","priority","searchText","console","log","filter","todo","length","includes","TodoList","todoName","setTodoName","setPriority","useSelector","height","span","overflowY","map","index","Group","display","compact","value","e","target","defaultValue","Option","label","onClick","uuidv4","Search","Input","Filters","setSearchText","filterStatus","setFilterStatus","setFilterPriority","Paragraph","fontWeight","marginTop","placeholder","sm","mode","allowClear","width","Title","Typography","App","flexDirection","backgroundColor","padding","boxShadow","borderRadius","textAlign","initState","filtersReducer","action","todoListReducer","rootReducer","combineReducers","composeEnhancers","composeWithDevTools","store","createStore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.454fc3cf.chunk.js","sourcesContent":["import { Row, Tag, Checkbox } from 'antd';\r\nimport { useState } from 'react';\r\nimport { useDispatch} from 'react-redux'\r\nimport {toggleTodoStatus} from '../../redux/actions'\r\n\r\n\r\n\r\nconst priorityColorMapping = {\r\n  High: 'red',\r\n  Medium: 'blue',\r\n  Low: 'gray',\r\n};\r\n\r\nexport default function Todo({ name, prioriry ,completed,id}) { //sẽ render ra nhiều Todo => mỗi Todo có 1 id\r\n  const [checked, setChecked] = useState(completed);\r\n  const dispatch = useDispatch()\r\n\r\n\r\n\r\n  const toggleCheckbox = () => {\r\n    setChecked(!checked);\r\n    dispatch(toggleTodoStatus(id))\r\n  };\r\n\r\n  return (\r\n    <Row\r\n      justify='space-between'\r\n      style={{\r\n        marginBottom: 3,\r\n        ...(checked ? { opacity: 0.5, textDecoration: 'line-through' } : {}),\r\n      }}\r\n    >\r\n      <Checkbox checked={checked} onChange={toggleCheckbox} >\r\n        {name}\r\n      </Checkbox>\r\n      <Tag color={priorityColorMapping[prioriry]} style={{ margin: 0 }}>\r\n        {prioriry}\r\n      </Tag>\r\n    </Row>\r\n  );\r\n}\r\n","\r\n\r\nexport const addTodo = (data)=>{\r\n    return {\r\n        type:'todoList/addTodo',\r\n        payload: data,\r\n    }\r\n}\r\n\r\nexport const toggleTodoStatus = (todoId) =>{\r\n    return {\r\n        type:'todoList/toggleTodoStatus',\r\n        payload:todoId\r\n    }\r\n}\r\nexport const searchFilterChange =(text) =>{\r\n    return {\r\n        type:'filter/searchFilterChange',\r\n        payload:text,\r\n    }\r\n}\r\n\r\nexport const statusFilterChange =(status) =>{\r\n    return {\r\n        type:'filters/statusFilterChange',\r\n        payload:status,\r\n\r\n    }\r\n}\r\n\r\nexport const priorityFilterChange = (priority) =>{\r\n    return {\r\n        type:'filters/priorityFilterChange',\r\n        payload:priority,\r\n    }\r\n}","import { createSelector } from \"reselect\";\r\n\r\n//useSelector k chỉ lấy state ,mà có thể lấy gia trị cụ thể trong state\r\n\r\n// export const searchTextSelector = (state) =>state.filters.search;    //saerchTextSelector là fn,ko phải biến nhận giá trị\r\n// export const todoListSelector = (state) => {\r\n//     const searchText = searchTextSelector(state)\r\n//     const todosRemaining = state.todoList.filter((todo) =>{ //th nào thoả dk trong callback thì dc đẩy vào arr mới => state => re-render\r\n//         return todo.name.includes(state.filters.search)     //includes('') tìm vs chuỗi rỗng thì luôn trả ra true (chỉ áp dụng khi includes trỏ ra String)\r\n//     })\r\n//     return todosRemaining\r\n// }\r\n\r\n//craeteSelector\r\nexport const searchTextSelector = (state) => state.filters.search;\r\nexport const filterStatusSelector = (state) => state.filters.status;\r\nexport const todoListSelector = (state) => state.todoList;\r\nexport const filterPrioritySelector = (state) => state.filters.priority;\r\n\r\n//fn này lấy ra dữ liệu đã dc lọc - Đảm nhiệm luôn cả nv trả ra todoList\r\nexport const todosRemainingSelector = createSelector(\r\n  todoListSelector,\r\n  searchTextSelector,\r\n  filterStatusSelector,\r\n  filterPrioritySelector,\r\n  (todoList, searchText, status, priority) => {\r\n    //status trong filters\r\n\r\n    console.log(status);\r\n    return todoList.filter((todo) => {\r\n      if (status === \"All\") {\r\n        return priority.length //nếu length > 1 or k có gì\r\n          ? todo.name.includes(searchText) && priority.includes(todo.priority)\r\n          : todo.name.includes(searchText);\r\n      }\r\n      return (\r\n        //th todo nao đảm bảo 2 dk dưới này thì dc trả ra [] mới\r\n        todo.name.includes(searchText) &&\r\n        (status === \"Completed\"\r\n          ? todo.completed // => true thì todo thoả 2dk include và cái này sẽ dc trả ra,false thì ko\r\n          : !todo.completed) && //TH else if (status==\"todo\") => false convert ! thành true\r\n        (priority.length ? priority.includes(todo.priority) : true)\r\n      );\r\n    });\r\n  }\r\n);\r\n","import { Col, Row, Input, Button, Select, Tag } from \"antd\";\r\nimport Todo from \"../Todo\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { addTodo } from \"../../redux/actions\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport { useState } from \"react\";\r\nimport { todosRemainingSelector } from \"../../redux/selectors\";\r\n\r\nexport default function TodoList() {\r\n  const [todoName, setTodoName] = useState(\"\"); //các state con dùng để lấy dữ liệu nhậP vào và set cho state chung  trong store\r\n  const [priority, setPriority] = useState(\"Medium\");\r\n\r\n  const todoList = useSelector(todosRemainingSelector); //useSelector nhậN vào callback đc đ/n sẵn thay vì đ.n trực tiếp trong này ((state) =>state.filters.search)\r\n  //nhận vào callback chứ k nhận vào 1 value\r\n  // const searchText = useSelector(searchTextSelector) //lấy state filter về (filter dc set lên từ comp Filters)\r\n  console.log(todoList);\r\n  const dispatch = useDispatch();\r\n  const handleAddButtonClick = () => {\r\n    dispatch(\r\n      addTodo({\r\n        id: uuidv4(),\r\n        name: todoName,\r\n        priority: priority,\r\n        completed: false,\r\n      })\r\n    );\r\n    setTodoName(\"\");\r\n    setPriority(\"\");\r\n  };\r\n\r\n  const handleInputChange = (e) => {\r\n    setTodoName(e.target.value);\r\n  };\r\n\r\n  const handlePriorityChange = (value) => {\r\n    //value này trả trực tiếp nhờ Select trong antDesign.ko cần trỏ từ e\r\n    setPriority(value);\r\n  };\r\n\r\n  return (\r\n    <Row style={{ height: \"calc(100% - 40px)\" }}>\r\n      <Col span={24} style={{ height: \"calc(100% - 40px)\", overflowY: \"auto\" }}>\r\n        {todoList.map((todo, index) => (\r\n          <Todo\r\n            id={todo.id}\r\n            key={index}\r\n            name={todo.name}\r\n            prioriry={todo.priority}\r\n            completed={todo.completed}\r\n          />\r\n        ))}\r\n      </Col>\r\n\r\n      {/* phần input dưới cùng */}\r\n      <Col span={24}>\r\n        <Input.Group style={{ display: \"flex\" }} compact>\r\n          <Input value={todoName} onChange={handleInputChange} />\r\n          <Select\r\n            defaultValue=\"Medium\"\r\n            value={priority}\r\n            onChange={handlePriorityChange}\r\n          >\r\n            <Select.Option value=\"High\" label=\"High\">\r\n              <Tag color=\"red\">High</Tag>\r\n            </Select.Option>\r\n            <Select.Option value=\"Medium\" label=\"Medium\">\r\n              <Tag color=\"blue\">Medium</Tag>\r\n            </Select.Option>\r\n            <Select.Option value=\"Low\" label=\"Low\">\r\n              <Tag color=\"gray\">Low</Tag>\r\n            </Select.Option>\r\n          </Select>\r\n          <Button type=\"primary\" onClick={handleAddButtonClick}>\r\n            Add\r\n          </Button>\r\n        </Input.Group>\r\n      </Col>\r\n    </Row>\r\n  );\r\n}\r\n","import { Col, Row, Input, Typography, Radio, Select, Tag } from 'antd';\r\nimport { useState } from 'react';\r\nimport { useDispatch } from 'react-redux/es/exports';\r\nimport { priorityFilterChange, searchFilterChange, statusFilterChange } from '../../redux/actions';\r\nimport {} from '../../redux/actions'\r\n\r\n\r\n\r\nconst { Search } = Input;\r\n\r\nexport default function Filters() {\r\n\r\n  const dispatch = useDispatch()\r\n  const [searchText,setSearchText] =useState('')\r\n  const [filterStatus ,setFilterStatus] =useState('All')\r\n  const [filterPriority,setFilterPriority] = useState([])\r\n\r\n\r\n\r\n  const handleSearchTextChange = e =>{\r\n    setSearchText(e.target.value)\r\n    dispatch(searchFilterChange(e.target.value)) //set lên state của store\r\n  }\r\n\r\n  const handleStatusOnchange  = (e) =>{\r\n    setFilterStatus(e.target.value)\r\n    dispatch(statusFilterChange(e.target.value))\r\n  }\r\n\r\n  const handlePriorityChange = (value) =>{\r\n    // console.log(e) //multi select nên trả ra một []\r\n    setFilterPriority(value)\r\n    dispatch(priorityFilterChange(value))\r\n  }\r\n\r\n  return (\r\n    <Row justify='center'>\r\n\r\n      <Col span={24}>\r\n        <Typography.Paragraph\r\n          style={{ fontWeight: 'bold', marginBottom: 3, marginTop: 10 }}\r\n        >\r\n          Search\r\n        </Typography.Paragraph>\r\n        <Search placeholder='input search text'  value = {searchText} onChange={handleSearchTextChange}/>\r\n      </Col>\r\n\r\n      <Col sm={24}>\r\n        <Typography.Paragraph\r\n          style={{ fontWeight: 'bold', marginBottom: 3, marginTop: 10 }}\r\n        >\r\n          Filter By Status\r\n        </Typography.Paragraph>\r\n        <Radio.Group value={filterStatus} onChange={handleStatusOnchange}>  {/*value này là gì thì mặc định bên dưới sẽ dc tick */}\r\n          <Radio value='All'>All</Radio>\r\n          <Radio value='Completed'>Completed</Radio>\r\n          <Radio value='Todo'>To do</Radio>\r\n        </Radio.Group>\r\n      </Col>\r\n\r\n      <Col sm={24}>\r\n        <Typography.Paragraph\r\n          style={{ fontWeight: 'bold', marginBottom: 3, marginTop: 10 }}\r\n        >\r\n          Filter By Priority\r\n        </Typography.Paragraph>\r\n        \r\n        <Select\r\n          mode='multiple'\r\n          allowClear\r\n          placeholder='Please select'\r\n          style={{ width: '100%' }}\r\n          onChange={handlePriorityChange}     \r\n        >\r\n          <Select.Option value='High' label='High'>\r\n            <Tag color='red'>High</Tag>\r\n          </Select.Option>\r\n          <Select.Option value='Medium' label='Medium'>\r\n            <Tag color='blue'>Medium</Tag>\r\n          </Select.Option>\r\n          <Select.Option value='Low' label='Low'>\r\n            <Tag color='gray'>Low</Tag>\r\n          </Select.Option>\r\n        </Select>\r\n      </Col>\r\n\r\n    </Row>\r\n  );\r\n}\r\n","import { Typography, Divider } from 'antd';\nimport './App.css';\nimport TodoList from './components/TodoList';\nimport Filters from './components/Filters';\n\nconst { Title } = Typography;\n\nfunction App() {\n  return (\n    <div\n      style={{\n        width: 500,\n        margin: '0 auto',\n        display: 'flex',\n        flexDirection: 'column',\n        backgroundColor: 'white',\n        padding: 20,\n        boxShadow: '0 0 10px 4px #bfbfbf',\n        borderRadius: 5,\n        height: '90vh',\n      }}\n    >\n      <Title style={{ textAlign: 'center' }}>TODO APP with REDUX</Title>\n      <Filters />\n      <Divider />\n      <TodoList />\n    </div>\n  );\n}\n\nexport default App;\n","const initState = {\r\n    search:'',\r\n    status:'All',\r\n    priority:[]\r\n\r\n}\r\n\r\nconst filtersReducer = (state = initState,action) =>{\r\n\r\n    switch(action.type){\r\n\r\n        case 'filter/searchFilterChange':\r\n            return {\r\n                ...state,\r\n                search:action.payload, //ghi đè cái cũ \r\n            }\r\n        case 'filters/statusFilterChange':\r\n            return {\r\n                ...state,\r\n                status:action.payload\r\n            }\r\n        case 'filters/priorityFilterChange':\r\n            return {\r\n                ...state,\r\n                priority:action.payload,\r\n            }\r\n        default :\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default filtersReducer","const initState = [\r\n  { id: 1, name: \"Learn Yoga\", completed: false, priority: \"Medium\" },\r\n  { id: 2, name: \"Learn Redux\", completed: true, priority: \"High\" },\r\n  { id: 3, name: \"Exercise\", completed: false, priority: \"Low\" },\r\n];\r\n\r\nconst todoListReducer = (state = initState, action) => {\r\n  switch (action.type) {\r\n    case \"todoList/addTodo\":\r\n      return [...state, action.payload]; //ghi thêm\r\n\r\n \r\n    case \"todoList/toggleTodoStatus\":   //reducer của action này chỉ cần cập nhật complete,ko cần thay đổi ở selector - gạch ngang ngoài UI thì do AntDesign làm\r\n      return state.map((todo) => //state riêng,ko pải global state\r\n        todo.id === action.payload\r\n          ? {...todo, completed : !todo.completed } //rải thằng todo con ra 1obj mới,cập nhật (ghi đè ) thằng completed chứ k phải else :\r\n          : todo    //ko bằng vs dk trên thì vẫn trả về các todo còn lại\r\n      );\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default todoListReducer;\r\n","import {combineReducers} from 'redux'\r\nimport filtersReducer from \"../components/Filters/FiltersSlice\"\r\nimport todoListReducer from \"../components/TodoList/TodosSlice\"\r\n\r\n\r\n\r\n\r\n// const rootReducer = (state={},action) =>{   //empty obj để trả ra undefind => sài default param\r\n\r\n//     return {\r\n//         filters:filtersReducer(state.filters , action), //trỏ tới state mà gặp obj rỗng =>undefind => nó lấy initState tại file của nó\r\n//         todoList:todoListReducer(state.todoList, action),\r\n//     }\r\n// }\r\n\r\n\r\nconst rootReducer = combineReducers({ //dùng combine thì truyền vào 2 cái đ.n hàm reducer thôi\r\n    filters:filtersReducer,\r\n    todoList:todoListReducer,\r\n})\r\nexport default rootReducer","import {createStore} from 'redux';\r\nimport rootReducer from './reducer';\r\nimport {composeWithDevTools} from 'redux-devtools-extension'\r\n\r\n\r\n\r\n\r\n\r\nconst composeEnhancers = composeWithDevTools()\r\nconst store = createStore(rootReducer,composeEnhancers)\r\n\r\nexport default store\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport store from './redux/store';\nimport {Provider } from 'react-redux';\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);"],"sourceRoot":""}